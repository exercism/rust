/// Process a single test case for the property `{{property.name}}`
///
/// All cases for the `{{property.name}}` property are implemented
/// in terms of this function.
///
/// Note that you'll need to both name the expected transform which
/// the student needs to write, and name the types of the inputs and outputs.
/// While rustc _may_ be able to handle things properly given a working example,
/// students will face confusing errors if the `I` and `O` types are not concrete.
{%- if property.inputs %}
///
/// expected input format: {{inputs}}
{% endif -%}
fn process_{{property.name | slugify | replace(from="-", to="_")}}_case<I, O>(input: I, expected: O) {
    // typical implementation:
    // assert_eq!(
    //      student_{{property.name | slugify | replace(from="-", to="_")}}_func(input),
    //      expected,
    // )
    unimplemented!()
}
