use variable_length_quantity as vlq;

{% for test_group in cases %}
{% for test in test_group.cases %}
#[test]
#[ignore]
fn {{ test.description | snake_case }}() {
{%- if test.property == "encode" %}
    let input = &{{ test.input.integers | json_encode() }};
    let output = vlq::to_bytes(input);
    let expected = vec![
        {%- for byte in test.expected -%}
            0x{{ byte | to_hex }},
        {%- endfor -%}
    ];
{%- elif test.property == "decode" %}
    let input = &[
        {%- for byte in test.input.integers -%}
            0x{{ byte | to_hex }},
        {%- endfor -%}
    ];
    let output = vlq::from_bytes(input);
    let expected = {% if test.expected is object -%}
        Err(vlq::Error::IncompleteNumber)
    {%- else -%}
        Ok(vec!{{ test.expected | json_encode() }})
    {%- endif %};
{%- else %}
    panic!("unknown property: {{ test.property }}");
{%- endif %}
    assert_eq!(output, expected);
}
{% endfor -%}
{% endfor -%}
