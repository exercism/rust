{% for test in cases %}
#[test]
{% if loop.index != 1 -%}
#[ignore]
{% endif -%}
fn {{ test.description | slugify | replace(from="-", to="_") }}() {
    let input = {{ test.input.phrase | json_encode() }};
    let output = {{ crate_name }}::{{ fn_names[0] }}(input);
    let expected = {{ test.expected | json_encode() }};
    assert_eq!(output, expected);
}
{% endfor -%}

{# 
    This test makes the exercise noticeably harder.

    Upstreaming this test is not a good option,
    as most other languages would exclude it due to the added difficulty.
    Removing the test from the Rust track is also not a good option,
    because it creates confusion regarding existing community solutions.

    While deviations from problem-specifications should generally be avoided,
    it seems like the best choice to stick with it in this case.
#}
#[test]
#[ignore]
fn camelcase() {
    assert_eq!(acronym::abbreviate("HyperText Markup Language"), "HTML");
}
