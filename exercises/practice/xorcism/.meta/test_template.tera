#[cfg(feature = "io")]
use std::io::{Read, Write};
use xorcism::Xorcism;

#[test]
#[ignore]
fn munge_in_place_identity() {
    let mut xs = Xorcism::new(&[0]);
    let input = "This is super-secret, cutting edge encryption, folks.".as_bytes();
    let mut output = input.to_owned();
    xs.munge_in_place(&mut output);

    assert_eq!(&input, &output);
}

#[test]
#[ignore]
fn munge_in_place_roundtrip() {
    let mut xs1 = Xorcism::new(&[1, 2, 3, 4, 5]);
    let mut xs2 = Xorcism::new(&[1, 2, 3, 4, 5]);
    let input = "This is super-secret, cutting edge encryption, folks.".as_bytes();
    let mut cipher = input.to_owned();
    xs1.munge_in_place(&mut cipher);
    assert_ne!(&input, &cipher);
    let mut output = cipher;
    xs2.munge_in_place(&mut output);
    assert_eq!(&input, &output);
}

#[test]
#[ignore]
fn munge_in_place_stateful() {
    let mut xs = Xorcism::new(&[1, 2, 3, 4, 5]);
    let input = "This is super-secret, cutting edge encryption, folks.".as_bytes();

    let mut cipher1 = input.to_owned();
    let mut cipher2 = input.to_owned();
    xs.munge_in_place(&mut cipher1);
    xs.munge_in_place(&mut cipher2);

    assert_ne!(&input, &cipher1);
    assert_ne!(&input, &cipher2);
    assert_ne!(&cipher1, &cipher2);
}

#[test]
#[ignore]
fn munge_identity() {
    let mut xs = Xorcism::new(&[0]);
    let data = "This is super-secret, cutting edge encryption, folks.";

    assert_eq!(
        xs.munge(data.as_bytes()).collect::<Vec<_>>(),
        data.as_bytes()
    );
}

#[test]
#[ignore]
fn statefulness() {
    // we expect Xorcism to be stateful: at the end of a munging run, the key has rotated.
    // this means that until the key has completely rotated around, equal inputs will produce
    // unequal outputs.
    let key = &[0, 1, 2, 3, 4, 5, 6, 7];
    let input = &[0b1010_1010, 0b0101_0101];

    let mut xs = Xorcism::new(&key);
    let out1: Vec<_> = xs.munge(input).collect();
    let out2: Vec<_> = xs.munge(input).collect();
    let out3: Vec<_> = xs.munge(input).collect();
    let out4: Vec<_> = xs.munge(input).collect();
    let out5: Vec<_> = xs.munge(input).collect();

    assert_ne!(out1, out2);
    assert_ne!(out2, out3);
    assert_ne!(out3, out4);
    assert_ne!(out4, out5);
    assert_eq!(out1, out5);
}

{% for test in cases %}

mod {{ test.description | make_ident }} {

    use super::*;

    const KEY: &str = {{ test.input.key | json_encode() }};
    const INPUT: &str = {{ test.input.input | json_encode() }};
    const EXPECT: &[u8] = &{{ test.expected | json_encode() }};

    /// tests where the key is expressed as `&str`, and input is expressed as `&[u8]`
    mod str_slice {
        use super::*;

        #[test]
        #[ignore]
        fn munge_in_place() {
            // we transform the input into a `Vec<u8>` despite its presence in this
            // module because of the more restricted syntax that this function accepts
            let mut input = INPUT.as_bytes().to_vec();
            let original = input.clone();

            // in-place munging is stateful on Xorcism, so clone it
            // to ensure the keys positions stay synchronized
            let mut xorcism1 = Xorcism::new(KEY);
            let mut xorcism2 = xorcism1.clone();

            xorcism1.munge_in_place(&mut input);
            assert_eq!(input.len(), original.len());
            assert_ne!(input, original);
            assert_eq!(input, EXPECT);
            xorcism2.munge_in_place(&mut input);
            assert_eq!(input, original);
        }

        #[test]
        #[ignore]
        fn munges() {
            let mut xorcism = Xorcism::new(KEY);
            let result: Vec<u8> = xorcism.munge(INPUT.as_bytes()).collect();
            assert_eq!(INPUT.len(), result.len());
            assert_ne!(INPUT.as_bytes(), result);
            assert_eq!(result, EXPECT);
        }

        #[test]
        #[ignore]
        fn round_trip() {
            let mut xorcism1 = Xorcism::new(KEY);
            let mut xorcism2 = xorcism1.clone();
            let munge_iter = xorcism1.munge(INPUT.as_bytes());
            let result: Vec<u8> = xorcism2.munge(munge_iter).collect();
            assert_eq!(INPUT.as_bytes(), result);
        }
    }

    /// tests where the key and input are both expressed as `&[u8]`
    mod slice_slice {
        use super::*;

        #[test]
        #[ignore]
        fn munge_in_place() {
            let key = KEY.as_bytes();

            // we transform the input into a `Vec<u8>` despite its presence in this
            // module because of the more restricted syntax that this function accepts
            let mut input = INPUT.as_bytes().to_vec();
            let original = input.clone();

            // in-place munging is stateful on Xorcism, so clone it
            // to ensure the keys positions stay synchronized
            let mut xorcism1 = Xorcism::new(key);
            let mut xorcism2 = xorcism1.clone();

            xorcism1.munge_in_place(&mut input);
            assert_eq!(input.len(), original.len());
            assert_ne!(input, original);
            assert_eq!(input, EXPECT);
            xorcism2.munge_in_place(&mut input);
            assert_eq!(input, original);
        }

        #[test]
        #[ignore]
        fn munges() {
            let key = KEY.as_bytes();
            let input = INPUT.as_bytes();

            let mut xorcism = Xorcism::new(key);
            let result: Vec<u8> = xorcism.munge(input).collect();
            assert_eq!(input.len(), result.len());
            assert_ne!(input, result);
            assert_eq!(result, EXPECT);
        }

        #[test]
        #[ignore]
        fn round_trip() {
            let key = KEY.as_bytes();
            let input = INPUT.as_bytes();

            let mut xorcism1 = Xorcism::new(key);
            let mut xorcism2 = xorcism1.clone();
            let munge_iter = xorcism1.munge(input);
            let result: Vec<u8> = xorcism2.munge(munge_iter).collect();
            assert_eq!(input, result);
        }
    }

    /// tests where the key is expressed as `&str` and input is expressed as `Vec<u8>`
    mod vec_vec {
        use super::*;

        #[test]
        #[ignore]
        fn munge_in_place() {
            let mut input = INPUT.as_bytes().to_vec();
            let original = input.clone();

            // in-place munging is stateful on Xorcism, so clone it
            // to ensure the keys positions stay synchronized
            let mut xorcism1 = Xorcism::new(KEY);
            let mut xorcism2 = xorcism1.clone();

            xorcism1.munge_in_place(&mut input);
            assert_eq!(input.len(), original.len());
            assert_ne!(input, original);
            assert_eq!(input, EXPECT);
            xorcism2.munge_in_place(&mut input);
            assert_eq!(input, original);
        }

        #[test]
        #[ignore]
        fn munges() {
            let owned_input = INPUT.as_bytes().to_vec();

            let mut xorcism = Xorcism::new(KEY);
            let result: Vec<u8> = xorcism.munge(owned_input).collect();
            assert_eq!(INPUT.len(), result.len());
            assert_ne!(INPUT.as_bytes(), result);
            assert_eq!(result, EXPECT);
        }

        #[test]
        #[ignore]
        fn round_trip() {
            let owned_input = INPUT.as_bytes().to_vec();

            let mut xorcism1 = Xorcism::new(KEY);
            let mut xorcism2 = xorcism1.clone();
            let munge_iter = xorcism1.munge(owned_input);
            let result: Vec<u8> = xorcism2.munge(munge_iter).collect();
            assert_eq!(INPUT.as_bytes(), result);
        }
    }

    #[cfg(feature = "io")]
    mod io {
        use super::*;

        #[test]
        #[ignore]
        fn reader_munges() {
            let mut reader = Xorcism::new(KEY).reader(INPUT.as_bytes());
            let mut buf = Vec::with_capacity(INPUT.len());
            let bytes_read = reader.read_to_end(&mut buf).unwrap();
            assert_eq!(bytes_read, INPUT.len());
            assert_eq!(buf, EXPECT);
        }

        #[test]
        #[ignore]
        fn reader_roundtrip() {
            let xs = Xorcism::new(KEY);
            let reader1 = xs.clone().reader(INPUT.as_bytes());
            let mut reader2 = xs.clone().reader(reader1);
            let mut buf = Vec::with_capacity(INPUT.len());
            let bytes_read = reader2.read_to_end(&mut buf).unwrap();
            assert_eq!(bytes_read, INPUT.len());
            assert_eq!(buf, INPUT.as_bytes());
        }

        #[test]
        #[ignore]
        fn writer_munges() {
            let mut writer_dest = Vec::new();
            {
                let mut writer = Xorcism::new(KEY).writer(&mut writer_dest);
                assert!(writer.write_all(INPUT.as_bytes()).is_ok());
            }
            assert_eq!(writer_dest, EXPECT);
        }

        #[test]
        #[ignore]
        fn writer_roundtrip() {
            let mut writer_dest = Vec::new();
            let xs = Xorcism::new(KEY);
            {
                let writer1 = xs.clone().writer(&mut writer_dest);
                let mut writer2 = xs.writer(writer1);
                assert!(writer2.write_all(INPUT.as_bytes()).is_ok());
            }
            assert_eq!(writer_dest, INPUT.as_bytes());
        }
    }
}
{% endfor -%}
