use robot_simulator::*;

{% for test in cases %}
#[test]
#[ignore]
fn {{ test.description | slugify | replace(from="-", to="_") }}() {
{%- if test.property == "create" %}
    let robot = Robot::new({{ test.input.position.x }}, {{ test.input.position.y }}, Direction::{{ test.input.direction | title }});
    assert_eq!(robot.position(), ({{ test.expected.position.x }}, {{ test.expected.position.y }}));
    assert_eq!(robot.direction(), &Direction::{{ test.expected.direction | title }});
}
    {% continue %}
{% endif -%}

    let robot_start = Robot::new({{ test.input.position.x }}, {{ test.input.position.y }}, Direction::{{ test.input.direction | title }});
{%- if test.input.instructions == "R" %}
    let robot_end = robot_start.turn_right();
{%- elif test.input.instructions == "L" %}
    let robot_end = robot_start.turn_left();
{%- elif test.input.instructions == "A" %}
    let robot_end = robot_start.advance();
{%- else %}
    let robot_end = robot_start.instructions({{ test.input.instructions | json_encode() }});
{% endif -%}
    assert_eq!(robot_end.position(), ({{ test.expected.position.x }}, {{ test.expected.position.y }}));
    assert_eq!(robot_end.direction(), &Direction::{{ test.expected.direction | title }});
}
{% endfor -%}
