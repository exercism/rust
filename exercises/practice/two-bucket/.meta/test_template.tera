use two_bucket::*;

{% macro bucket(label) -%}
    {% if label == 'one' -%}
        Bucket::One
    {%- else -%}
        Bucket::Two
    {%- endif %}
{%- endmacro bucket -%}

{% for test in cases %}
#[test]
#[ignore]
fn {{ test.description | snake_case }}() {
    let output = solve(
        {{ test.input.bucketOne }}, {{ test.input.bucketTwo }}, {{ test.input.goal }},
        &{{ self::bucket(label=test.input.startBucket) }},
    );
    let expected = {% if 'error' in test.expected -%}
        None
    {%- else -%}
        Some(BucketStats {
            moves: {{ test.expected.moves }},
            goal_bucket: {{ self::bucket(label=test.expected.goalBucket) }},
            other_bucket: {{ test.expected.otherBucket }},
        })
    {%- endif %};
    assert_eq!(output, expected);
}
{% endfor -%}
