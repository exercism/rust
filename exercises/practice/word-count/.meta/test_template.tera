use word_count::*;

{% for test in cases %}
#[test]
#[ignore]
fn {{ test.description | slugify | replace(from="-", to="_") }}() {
    let input = {{ test.input.sentence | json_encode() }};
    let mut output = word_count(input);
    let expected = [{% for key, value in test.expected -%}
        ({{ key | json_encode() }}, {{ value }}),
    {%- endfor %}];
    {#-
        The reason for the awkward code in here is to ensure that the failure
        message for assert_eq! is as informative as possible. A simpler
        solution would simply check the length of the map, and then
        check for the presence and value of each key in the given pairs vector.
    #}
    for (word, count) in expected {
        assert_eq!((word, output.remove(word).unwrap_or(0)), (word, count));
    }
    {#- may fail with a message that clearly shows all extra pairs in the map #}
    assert_eq!(output.into_iter().collect::<Vec<_>>(), vec![]);
}
{% endfor -%}
